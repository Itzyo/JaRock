<?xml version="1.0"?>

<packets>
<!-- structure: -->
<!-- 

	<packet id="See https://wiki.vg/index.php?title=Protocol&oldid=15346" state="See https://wiki.vg/index.php?title=Protocol&oldid=15346" name="See https://wiki.vg/index.php?title=Protocol&oldid=15346" type="Only present if a packet has multiple definitions, if its set then a byte with the specified type is pushed to the first element of the data array">
		<field type="See https://wiki.vg/index.php?title=Protocol&oldid=15346" optional="if the field is optional then it optional is true. If set a boolean will be pushed BEFORE the actual field indicating if the field is present or not">Field name</field>
	</packet>
 -->
 
<!-- inbound packets (Client -> Server) -->
	<packet id="0" state="0" name="Handshake">
		<!-- See protocol version numbers (currently 498 in Minecraft 1.14.4) -->
		<field type="VarInt">ProtocolVersion</field>
		<!-- Hostname or IP, e.g. localhost or 127.0.0.1, that was used to connect. 
		 The Notchian server does not use this information. Note that SRV records are a complete redirect,
		 e.g. if _minecraft._tcp.example.com points to mc.example.org,
		 users connecting to example.com will provide mc.example.org as server address in addition to connecting to it. -->
		<field type="String">ServerAddress</field>
		<!-- Default is 25565. The Notchian server does not use this information. -->
		<field type="UnsignedShort">ServerPort</field>
		<!-- 1 for status, 2 for login -->
		<field type="VarInt">NextState</field>
	</packet>
	
	<packet id="0" state="2" name="Login Start">
		<!-- Player's Username -->
		<field type="String">Username</field>
	</packet>
	
	<packet id="15" state="3" name="Keep Alive">	
		<!-- The server will frequently send out a keep-alive, each containing a random ID. The client must respond with the same packet. -->
		<field type="Long">KeepAliveID</field>
	</packet>
	
	<packet id="17" state="3" name="Player Position">
		<!-- See https://wiki.vg/index.php?title=Protocol&oldid=15346#Player_Position -->
		<!-- Absolute position -->
		<field type="Double">X</field>
		<!-- Absolute feet position, normally Head Y - 1.62 -->
		<field type="Double">Y</field>
		<!-- Absolute position -->
		<field type="Double">Z</field>
		<!-- True if the client is on the ground, false otherwise -->
		<field type="Boolean">OnGround</field>
	</packet>
	
	<packet id="19" state="3" name="Player Rotation">
		<!-- See https://wiki.vg/index.php?title=Protocol&oldid=15346#Player_Rotation -->
		<!-- Absolute rotation on the X Axis, in degrees -->
		<field type="Float">Yaw</field>
		<!-- Absolute rotation on the Y Axis, in degrees -->
		<field type="Float">Pitch</field>
		<!-- True if the client is on the ground, False otherwise -->
		<field type="Boolean">OnGround</field>
	</packet>

<!-- outpound packets (Server -> Client) -->

	<packet id="2" state="2" name="Login Success">
		<!-- Unlike in other packets, this field contains the UUID as a string with hyphens. -->
		<field type="String">UUID</field>
		<field type="String">Username</field>
	</packet>
			
	<packet id="32" state="3" name="Keep Alive">
		<!-- The server will frequently send out a keep-alive, each containing a random ID.
		 The client must respond with the same packet. If the client does not respond to them for over 30 seconds, the server kicks the client.
		 Vice versa, if the server does not send any keep-alives for 20 seconds, the client will disconnect and yields a "Timed out" exception.
		 The Notchian server uses a system-dependent time in milliseconds to generate the keep alive ID value. -->
		<field type="Long">KeepAliveID</field>
	</packet>
	
	<packet id="33" state="3" name="Chunk Data">
	
		<!-- The server only sends skylight information for chunk pillars in the Overworld,
		 it's up to the client to know in which dimenison the player is currently located.
		 You can also infer this information from the primary bitmask and the amount of uncompressed bytes sent.
		 This packet also sends all block entities in the chunk (though sending them is not required;
		 it is still legal to send them with Update Block Entity later). -->
	
		<!-- Chunk coordinate (block coordinate divided by 16, rounded down) -->
		<field type="Int">ChunkX</field>
		<!-- Chunk coordinate (block coordinate divided by 16, rounded down) -->
		<field type="Int">ChunkZ</field>
		<!-- See https://wiki.vg/Chunk_Format#Full_chunk -->
		<field type="Boolean">FullChunk</field>
		<!-- Bitmask with bits set to 1 for every 16×16×16 chunk section whose data is included in Data.
		 The least significant bit represents the chunk section at the bottom of the chunk column (from y=0 to y=15). -->
		<field type="VarInt">PrimaryBitMask</field>
		<!-- Compound containing one long array named MOTION_BLOCKING,
		 which is a heightmap for the highest solid block at each position in the chunk
		 (as a compacted long array with 256 entries at 9 bits per entry totaling 36 longs).
		 The Notchian server also adds a WORLD_SURFACE long array, the purpose of which is unknown, but it's not required for the chunk to be accepted. -->
		<field type="NBT">Heightmaps</field>
		<!-- Size of Data in bytes -->
		<field type="VarInt">Size</field>
		<!-- See https://wiki.vg/Chunk_Format#Data_structure -->
		<field type="ByteArray">Data</field>
		<!-- Number of elements in the following array (Currently always 0) -->
		<field type="VarInt">NumberOfBlockEntities</field>
		<!-- All block entities in the chunk. Use the x, y, and z tags in the NBT to determine their positions. -->
		<!-- <field type=NBTArray>Block Entities</field> -->
	</packet>
	
	<packet id="37" state="3" name="Join Game">
		<!-- The player's Entity ID (EID) -->
		<field type="Int">EntityID</field>
		<!-- 0: Survival, 1: Creative, 2: Adventure, 3: Spectator. Bit 3 (0x8) is the hardcore flag. -->
		<field type="Byte">Gamemode</field>
		<!-- -1: Nether, 0: Overworld, 1: End; also, note that this is not a VarInt but instead a regular int. -->
		<field type="Int">Dimension</field>
		<!-- Was once used by the client to draw the player list, but now is ignored -->
		<field type="Byte">MaxPlayers</field>
		<!-- default, flat, largeBiomes, amplified, customized, buffet, default_1_1 -->
		<field type="String">LevelType</field>
		<!-- Render distance (2-32) -->
		<field type="VarInt">ViewDistance</field>
		<!-- If true, a Notchian client shows reduced information on the debug screen. For servers in development, this should almost always be false. -->
		<field type="Boolean">ReducedDebugInfo</field>
	</packet>
	
	<packet id="51" state="3" name="Player Info (Add Player)" type="0">
		<!-- Sent by the server to update the user list (<tab> in the client). -->
		<!-- Determines the rest of the Player format after the UUID (In this case: 0) -->
		<field type="VarInt">Action</field>
		<!-- Number of elements in the following array (Even if it says "Add player" you have to send every player) -->
		<field type="VarInt">NumberOfPlayers</field>"
		<field type="UUID">UUID</field>
		<field type="String">Name</field>
		<field type="VarInt">NumberOfProperties</field>
		<field type="String" optional="true">Name</field>
		<field type="String" optional="true">Value</field>
		<field type="Boolean" optional="true">IsSigned</field>
		<!-- Only if Is Signed is true -->
		<field type="String" optional="true">Signature</field>
		<field type="VarInt">Gamemode</field>
		<!-- Measured in milliseconds -->
		<field type="VarInt">Ping</field>
		<field type="Boolean">HasDisplayName</field>
		<!-- Only if Has Display Name is true -->
		<field type="Chat" optional="yes">DisplayName</field>
		
		<!-- The Property field looks as in the response of Mojang API#UUID -> Profile + Skin/Cape,
		 except of course using the protocol format instead of JSON.
		 That is, each player will usually have one property with Name “textures” and Value being a base64-encoded JSON string
		 as documented at https://wiki.vg/Mojang_API#UUID_-.3E_Profile_.2B_Skin.2FCape.
		 An empty properties array is also acceptable, and will cause clients to display the player with one of the two default skins depending on UUID.

			Ping values correspond with icons in the following way:
			
			A ping that negative (i.e. not known to the server yet) will result in the no connection icon.
			A ping under 150 milliseconds will result in 5 bars
			A ping under 300 milliseconds will result in 4 bars
			A ping under 600 milliseconds will result in 3 bars
			A ping under 1000 milliseconds (1 second) will result in 2 bars
			A ping greater than or equal to 1 second will result in 1 bar. -->
		
	</packet>
	
	<packet id="51" state="3" name="Player Info (Remove Player)" type="4">
		<!-- Determines the rest of the Player format after the UUID (In this case: 4) -->
		<field type="VarInt">Action</field>
		<!-- Number of elements in the following array -->
		<field type="VarInt">NumberOfPlayers</field>
		<field type="UUID">UUID</field>
	</packet>
	
	<packet id="53" state="3" name="Player Position And Look">
		<!-- Absolute or relative position, depending on Flags -->
		<field type="Double">X</field>
		<!-- Absolute or relative position, depending on Flags -->
		<field type="Double">Y</field>
		<!-- Absolute or relative position, depending on Flags -->
		<field type="Double">Z</field>
		<!-- Absolute or relative rotation on the X axis, in degrees -->
		<field type="Float">Yaw</field>
		<!-- Absolute or relative rotation on the Y axis, in degrees -->
		<field type="Float">Pitch</field>
		<!-- Bit field, see below -->
		<field type="Byte">Flags</field>
		<!-- Client should confirm this packet with Teleport Confirm containing the same Teleport ID -->
		<field type="VarInt">TeleportID</field>
		
		<!-- About the Flags field:

			<Dinnerbone> It's a bitfield, X/Y/Z/Y_ROT/X_ROT. If X is set, the x value is relative and not absolute.
			Field	Bit
			X	0x01
			Y	0x02
			Z	0x04
			Y_ROT	0x08
			X_ROT	0x10
		 -->
	</packet>
		
	<packet id="63" state="3" name="Held Item Change">
		<!-- The slot which the player has selected (0–8) -->
		<field type="Byte">Slot</field>
	</packet>
	
	<packet id="77" state="3" name="Spawn Position">
		<!-- Spawn location -->
		<field type="Position">Location</field>
	</packet>

</packets>